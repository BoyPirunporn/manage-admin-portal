// app/api/_utils/with-auth.ts (‡∏´‡∏£‡∏∑‡∏≠ path ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)

import { authOptions } from "@/lib/auth/auth";
import { Session } from "next-auth";
import { getServerSession } from "next-auth/next";
import { NextRequest, NextResponse } from "next/server";

// 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡∏Ç‡∏≠‡∏á handler ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ö session ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
type AuthenticatedRouteHandler<T = {}> = (
    req: NextRequest,
    context: { params: T; },
    session: Session // üëà ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á session ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
) => Promise<NextResponse | Response>;

// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô withAuth
export function withAuth<T = {}>(handler: AuthenticatedRouteHandler<T>) {
    return async (req: NextRequest,context:{params:T}) => {
        const session = await getServerSession(authOptions);

        if (!session || !session.user) {
            return new NextResponse(JSON.stringify({ message: "Unauthorized" }), {
                status: 401,
                headers: { "Content-Type": "application/json" },
            });
        }

        // ‡∏ñ‡πâ‡∏≤ session ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handler ‡πÄ‡∏î‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á req ‡πÅ‡∏•‡∏∞ session ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        return handler(req, context,session);
    };
}